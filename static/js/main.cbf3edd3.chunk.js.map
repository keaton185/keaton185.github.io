{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","react_default","a","createElement","className","class","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNA8EeA,0LAzEX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,yCACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACXJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,mBACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,yFAGFH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACTJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,SACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eAAb,iUAMAH,EAAAC,EAAAC,cAAA,WANA,wGAWJF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACXJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,UACXJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,QACEH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACZH,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,4DACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,2CACAF,EAAAC,EAAAC,cAAA,4CAGJF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,UACXJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,YACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACVH,EAAAC,EAAAC,cAAA,iDACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,oCACAF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,gDAGJF,EAAAC,EAAAC,cAAA,OAAKE,MAAM,UACXJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,aACAH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACZH,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,wCACAF,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,yCACAF,EAAAC,EAAAC,cAAA,uCAKNF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACbH,EAAAC,EAAAC,cAAA,OAAKE,MAAM,aACTJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,gBAAd,WACAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACZH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,sCAAR,+BACJL,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,6CAAR,yBAhEAC,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOb,EAAAC,EAAAC,cAACY,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.cbf3edd3.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"jumbotron jumbotron-fluid introHeader\">\n          <div class=\"container\">\n          <h1 className=\"introText\">Hi, I'm Keaton.</h1>\n          <p className=\"introLine\">Full Stack Web Developer with a passion for building well-crafted digital products.</p>\n          </div>\n        </div>\n        <div className=\"detailSection\">\n          <div class=\"container\">\n            <h3 className=\"sectionTitle\">About</h3>\n            <p className=\"sectionBody\">\n            Originally from a technical consulting background advising\n            corporates on systems solution design and architecture throughout Australia, \n            I've re-positioned to development to better align with my passion\n            of delivering well-crafted digital products and solutions for businesses and \n            audiences of all sizes and backgrounds.\n            <br />\n            I'm currently based in Toronto, Canada and am open for opportunities in both Canada and Australia.\n            </p>\n          </div>\n        </div>\n        <div class=\"container\">\n        <div className=\"row\">\n            <div class=\"col-sm\">\n            <h3 className=\"sectionTitle\">Tech</h3>\n              <ul className=\"sectionList\">\n                <li>JavaScript / TypeScript / Python / PHP</li>\n                <li>Angular 2+ / React / React Native / TensorFlow</li>\n                <li>SQL / NoSQL / SSRS / BusinessObjects</li>\n                <li>Laravel / WordPress / Shopify</li>\n                <li>Git / NPM / Jenkins / Bamboo</li>\n              </ul>\n            </div>\n            <div class=\"col-sm\">\n            <h3 className=\"sectionTitle\">Projects</h3>\n            <ul className=\"sectionList\">\n                <li>Automated Document Analysis (AI/ML)</li>\n                <li>Native Mobile Applications</li>\n                <li>Insurance CRM Platform</li>\n                <li>Dynamic Digital Signage</li>\n                <li>WordPress / Shopify Theme Builds</li>\n              </ul>\n            </div>\n            <div class=\"col-sm\">\n            <h3 className=\"sectionTitle\">Expertise</h3>\n            <ul className=\"sectionList\">\n              <li>Full Stack Web Development</li>\n              <li>Native Mobile Applications</li>\n              <li>Data Scraping / Analysis / Reporting</li>\n              <li>Technical Business Analysis</li>\n              <li>Solution Architecture</li>\n            </ul>\n            </div>\n        </div>\n        </div>\n        <div className=\"detailSection\">\n          <div class=\"container\">\n            <h3 className=\"sectionTitle\">Contact</h3>\n            <p className=\"sectionBody\">\n            <ul className=\"sectionList\">\n              <li><a href=\"mailto: keaton.neville90@gmail.com\">keaton.neville90@gmail.com</a></li>\n              <li><a href=\"https://www.linkedin.com/in/keatonneville\">LinkedIn</a></li>\n\n            </ul>\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}